import React, { useState } from 'react';
import InfoCard from '../InfoCard';
import CodeBlock, { Keyword, StringLiteral, Comment, NumberLiteral, Func } from '../CodeBlock';
import { TopicComponentProps } from '../../types';

interface Node {
    value: number;
    id: number;
}

const LinkedListVisualizer: React.FC = () => {
    const [nodes, setNodes] = useState<Node[]>([
        { value: 10, id: 1 },
        { value: 20, id: 2 },
        { value: 30, id: 3 },
    ]);
    const [inputValue, setInputValue] = useState('');
    const [removeValue, setRemoveValue] = useState('');

    const addNode = () => {
        const value = parseInt(inputValue, 10);
        if (!isNaN(value)) {
            setNodes([...nodes, { value, id: Date.now() }]);
            setInputValue('');
        }
    };
    
    const removeNode = () => {
        const value = parseInt(removeValue, 10);
        if (!isNaN(value)) {
            const nodeIndex = nodes.findIndex(n => n.value === value);
            if(nodeIndex !== -1) {
                setNodes(nodes.filter((_, index) => index !== nodeIndex));
            } else {
                alert('ุงูุนูุฏุฉ ุบูุฑ ููุฌูุฏุฉ!');
            }
            setRemoveValue('');
        }
    };

    return (
        <div className="bg-gradient-to-br from-slate-50 to-slate-100 rounded-2xl p-6 my-8 border-l-4 border-blue-500 shadow-md">
            <h3 className="text-xl font-bold text-blue-700 mb-2 flex items-center gap-2"><span className="text-2xl">๐</span> ูุญุงูู ุงููุงุฆูุฉ ุงููุฑุชุจุทุฉ</h3>
            <p className="text-slate-600 mb-4">ุฃุถู ุฃู ุงุญุฐู ุนูุฏูุง ูุชุชุฎูู ููู ุชุนูู ุงููุงุฆูุฉ ุงููุฑุชุจุทุฉ ูููู ุชุชุบูุฑ ุงููุคุดุฑุงุช.</p>
            
            <div className="flex flex-wrap items-center justify-center p-4 min-h-[80px]">
                <div className="bg-purple-500 text-white font-bold px-3 py-1 rounded-lg mr-2 shadow-md">Head</div>
                {nodes.map((node, index) => (
                    <React.Fragment key={node.id}>
                        <div className="text-2xl font-bold text-slate-400 mx-1">โ</div>
                        <div className="flex items-center bg-white rounded-lg shadow-lg animate-fade-in-up">
                            <div className="bg-indigo-500 text-white font-mono font-bold w-12 h-12 flex items-center justify-center text-lg rounded-l-lg">{node.value}</div>
                            <div className="bg-slate-300 w-8 h-12 flex items-center justify-center rounded-r-lg">
                                <div className="w-2 h-2 bg-slate-600 rounded-full"></div>
                            </div>
                        </div>
                    </React.Fragment>
                ))}
                 <div className="text-2xl font-bold text-slate-400 mx-1">โ</div>
                 <div className="text-red-500 font-bold px-3 py-1 rounded-lg ml-2 text-lg">NULL</div>
            </div>

            <div className="mt-6 flex justify-center items-center gap-4 flex-wrap border-t pt-6">
                 <div>
                    <input type="number" value={inputValue} onChange={(e) => setInputValue(e.target.value)} placeholder="ุฃุฏุฎู ูููุฉ ููุฅุถุงูุฉ" className="p-2 border-2 border-slate-300 rounded-lg focus:ring-2 focus:ring-green-400 focus:border-green-400 transition" />
                    <button onClick={addNode} className="bg-green-500 text-white font-bold py-2 px-5 rounded-lg hover:bg-green-600 transition mr-2">ุฅุถุงูุฉ ููููุงูุฉ</button>
                </div>
                 <div>
                    <input type="number" value={removeValue} onChange={(e) => setRemoveValue(e.target.value)} placeholder="ุฃุฏุฎู ูููุฉ ููุญุฐู" className="p-2 border-2 border-slate-300 rounded-lg focus:ring-2 focus:ring-red-400 focus:border-red-400 transition" />
                    <button onClick={removeNode} className="bg-red-500 text-white font-bold py-2 px-5 rounded-lg hover:bg-red-600 transition mr-2">ุญุฐู ุนูุฏุฉ</button>
                </div>
            </div>
        </div>
    );
};


const LinkedListTopic: React.FC<TopicComponentProps> = ({ onStartQuiz }) => {
    return (
        <div className="space-y-12 animate-fade-in-up">
            <header className="bg-white/90 backdrop-blur-sm rounded-2xl p-8 text-center shadow-lg">
                <h2 className="text-4xl font-extrabold mb-3 bg-gradient-to-r from-blue-500 to-teal-400 text-transparent bg-clip-text">ุงูููุงุฆู ุงููุชุฑุงุจุทุฉ (Linked Lists)</h2>
                <p className="text-lg text-slate-600 max-w-3xl mx-auto mb-6">
                    ุจููุฉ ุจูุงูุงุช ุฏููุงููููุฉ ุชุชููู ูู ุณูุณูุฉ ูู ุงูุนููุฏุ ุญูุซ ุชุญุชูู ูู ุนูุฏุฉ ุนูู ุจูุงูุงุช ููุคุดุฑ ููุนูุฏุฉ ุงูุชุงููุฉ. ุฅููุง ุจุฏูู ูุฑู ูููุตูููุงุช.
                </p>
                <div className="flex justify-center gap-4 flex-wrap">
                     <button onClick={onStartQuiz} className="bg-gradient-to-r from-green-500 to-teal-500 text-white font-bold py-3 px-6 rounded-full hover:scale-105 transform transition shadow-md">
                        <span className="mr-2">๐งช</span> ุงุฎุชุจุงุฑ ุดุงูู (15 ุณุคุงู)
                    </button>
                </div>
            </header>

            <section>
                <h3 className="text-3xl font-bold text-slate-800 mb-6 text-center">ููุงุฐุง ูุณุชุฎุฏู ุงูููุงุฆู ุงููุฑุชุจุทุฉุ</h3>
                <div className="grid md:grid-cols-2 gap-6">
                    <InfoCard icon="โก" title="ุงูููุฒุฉ ุงูุฏููุงููููุฉ" iconBgClass="bg-green-500">
                        <p><strong>ุญุฌู ูุฑู:</strong> ูููู ููููุงุฆู ุงููุฑุชุจุทุฉ ุฃู ุชููู ูุชุชููุต ุจุณูููุฉ ุฃุซูุงุก ุชุดุบูู ุงูุจุฑูุงูุฌุ ุนูู ุนูุณ ุงููุตูููุงุช ุงูุชู ููุง ุญุฌู ุซุงุจุช ูุชู ุชุญุฏูุฏู ุนูุฏ ุงูุชุฑุฌูุฉ.</p>
                        <p><strong>ูุง ุญุงุฌุฉ ููุชุฎููู:</strong> ูุง ูุญุชุงุฌ ุฅูู ูุนุฑูุฉ ุนุฏุฏ ุงูุนูุงุตุฑ ูุณุจููุง. ูุชู ุฅูุดุงุก ุงูุนูุฏ ูู ุงูุฐุงูุฑุฉ ุญุณุจ ุงูุญุงุฌุฉ.</p>
                    </InfoCard>
                    <InfoCard icon="๐" title="ุฅุถุงูุฉ ูุญุฐู ูุนุงู" iconBgClass="bg-orange-500">
                        <p><strong>ุณุฑุนุฉ ูู ุงูุชุนุฏูู:</strong> ูุฅุฏุฑุงุฌ ุฃู ุญุฐู ุนูุตุฑุ ูู ูุง ูุญุชุงุฌู ูู ุฅุนุงุฏุฉ ุชูุฌูู ุจุนุถ ุงููุคุดุฑุงุชุ ููู ุนูููุฉ ุณุฑูุนุฉ ุฌุฏูุง (O(1)).</p>
                        <p><strong>ูุง ุญุงุฌุฉ ููุฅุฒุงุญุฉ:</strong> ุนูู ุนูุณ ุงููุตูููุงุชุ ูุง ูุญุชุงุฌ ุฅูู ุฅุฒุงุญุฉ ุงูุนูุงุตุฑ ุงูุฃุฎุฑู ุนูุฏ ุงูุฅุถุงูุฉ ุฃู ุงูุญุฐูุ ููุง ูููุฑ ุงููุซูุฑ ูู ุงูููุช ุนูุฏ ุงูุชุนุงูู ูุน ูููุงุช ูุจูุฑุฉ ูู ุงูุจูุงูุงุช.</p>
                    </InfoCard>
                </div>
            </section>

             <section>
                <h3 className="text-3xl font-bold text-slate-800 mb-6 text-center">ุงูุจููุฉ ุงูุฃุณุงุณูุฉ ูููุงุฆูุฉ ุงููุฑุชุจุทุฉ</h3>
                 <div className="grid md:grid-cols-2 gap-6 items-center">
                    <div>
                        <InfoCard icon="๐งฑ" title="ููููุงุช ุงูุนูุฏุฉ (Node)" iconBgClass="bg-indigo-500">
                           <p>ูู ูุงุฆูุฉ ูุฑุชุจุทุฉ ุชุชููู ูู ุนูุฏ. ูู ุนูุฏุฉ ูู ูุงุฆู ูุญุชูู ุนูู ุฌุฒุฃูู ุฑุฆูุณููู:</p>
                           <p><strong>1. ุงูุจูุงูุงุช (Data):</strong> ุงููููุฉ ุงููุนููุฉ ุงูุชู ูุฑูุฏ ุชุฎุฒูููุง (ุฑููุ ูุตุ ูุงุฆูุ ุฅูุฎ).</p>
                           <p><strong>2. ุงููุคุดุฑ (Next Pointer):</strong> ุนููุงู ูู ุงูุฐุงูุฑุฉ ูุดูุฑ ุฅูู ุงูุนูุฏุฉ ุงูุชุงููุฉ ูู ุงูุณูุณูุฉ. ุงูุนูุฏุฉ ุงูุฃุฎูุฑุฉ ุชุดูุฑ ุฅูู `NULL`.</p>
                        </InfoCard>
                         <InfoCard icon="๐" title="ุงููุคุดุฑ ุงูุฑุฆูุณู (Head)" iconBgClass="bg-purple-500">
                           <p>ุงูู `Head` ูู ูุคุดุฑ ุฎุงุต ูุดูุฑ ุฏุงุฆููุง ุฅูู ุงูุนูุฏุฉ ุงูุฃููู ูู ุงููุงุฆูุฉ. ุฅูู ููุทุฉ ุงูุจุฏุงูุฉ ูุงููุตูู ูููุงุฆูุฉ ุจุฃููููุง. ุฅุฐุง ููุฏูุง ูุคุดุฑ `Head`ุ ูุฅููุง ูููุฏ ุงููุงุฆูุฉ ุจุฃููููุง.</p>
                        </InfoCard>
                    </div>
                     <div className="bg-white/50 p-4 rounded-lg shadow-md text-center">
                        <img src="https://i.imgur.com/v1bA5VB.png" alt="Linked List Structure" className="mx-auto rounded-lg" />
                        <p className="mt-2 text-sm text-slate-600">ุฑุณู ุชูุถูุญู ููุถุญ ุชุฑุงุจุท ุงูุนูุฏ ูู `Head` ุฅูู `NULL`.</p>
                    </div>
                 </div>
            </section>

            <LinkedListVisualizer />
            
            <section>
                <h3 className="text-3xl font-bold text-slate-800 mb-6 text-center">ุงูุชูููุฐ ุจุงุณุชุฎุฏุงู C++</h3>
                <p className="text-center text-slate-600 mb-6 max-w-3xl mx-auto">ุนุงุฏุฉูุ ูุณุชุฎุฏู ูุฆุชูู (classes) ูุชูููุฐ ูุงุฆูุฉ ูุฑุชุจุทุฉ: ูุฆุฉ `Node` ูุชูุซูู ุงูุนูุฏุฉุ ููุฆุฉ `LinkedList` ูุฅุฏุงุฑุฉ ุงูุนูููุงุช ุนูู ุงููุงุฆูุฉ ูุซู ุงูุฅุถุงูุฉุ ุงูุญุฐูุ ูุงูุจุญุซ.</p>

                <CodeBlock title="ุชุนุฑูู ูุฆุฉ Node ู LinkedList">
                    <Comment>// ูุฆุฉ ูุชูุซูู ุงูุนูุฏุฉ ุงููุงุญุฏุฉ</Comment>{'\n'}
                    <Keyword>class</Keyword> Node {'{'}{'\n'}
                    <Keyword>public</Keyword>:{'\n'}
                    {'    '}<Keyword>int</Keyword> data;      <Comment>// ุงูุจูุงูุงุช ุงููุฎุฒูุฉ</Comment>{'\n'}
                    {'    '}Node* next;    <Comment>// ูุคุดุฑ ููุนูุฏุฉ ุงูุชุงููุฉ</Comment>{'\n'}
                    {'}'};{'\n\n'}
                    
                    <Comment>// ูุฆุฉ ูุฅุฏุงุฑุฉ ุนูููุงุช ุงููุงุฆูุฉ ุงููุฑุชุจุทุฉ</Comment>{'\n'}
                    <Keyword>class</Keyword> LinkedList {'{'}{'\n'}
                    <Keyword>private</Keyword>:{'\n'}
                    {'    '}Node* head;  <Comment>// ูุคุดุฑ ูุฃูู ุนูุฏุฉ ูู ุงููุงุฆูุฉ</Comment>{'\n\n'}
                    <Keyword>public</Keyword>:{'\n'}
                    {'    '}<Func>LinkedList</Func>() {'{'} head = <Keyword>nullptr</Keyword>; {'}'} <Comment>// Constructor</Comment>{'\n\n'}
                    {'    '}<Keyword>void</Keyword> <Func>insertAtEnd</Func>(<Keyword>int</Keyword> value);{'\n'}
                    {'    '}<Keyword>void</Keyword> <Func>insertAtBeginning</Func>(<Keyword>int</Keyword> value);{'\n'}
                    {'    '}<Keyword>bool</Keyword> <Func>deleteNode</Func>(<Keyword>int</Keyword> value);{'\n'}
                    {'    '}<Keyword>void</Keyword> <Func>display</Func>();{'\n'}
                    {'}'};
                </CodeBlock>

                <h4 className="font-bold text-xl mb-2 text-slate-700 mt-8">1. ุงูุฅุถุงูุฉ ูู ููุงูุฉ ุงููุงุฆูุฉ</h4>
                <CodeBlock title="ุฏุงูุฉ insertAtEnd">
                    <Keyword>void</Keyword> LinkedList::<Func>insertAtEnd</Func>(<Keyword>int</Keyword> value) {'{'}{'\n'}
                    {'    '}Node* newNode = <Keyword>new</Keyword> Node(); <Comment>// 1. ุฅูุดุงุก ุนูุฏุฉ ุฌุฏูุฏุฉ</Comment>{'\n'}
                    {'    '}newNode-&gt;data = value;{'\n'}
                    {'    '}newNode-&gt;next = <Keyword>nullptr</Keyword>; <Comment>// ุณุชููู ุงูุนูุฏุฉ ุงูุฃุฎูุฑุฉ</Comment>{'\n\n'}
                    {'    '}<Keyword>if</Keyword> (head == <Keyword>nullptr</Keyword>) {'{'} <Comment>// 2. ุฅุฐุง ูุงูุช ุงููุงุฆูุฉ ูุงุฑุบุฉ</Comment>{'\n'}
                    {'        '}head = newNode;{'\n'}
                    {'        '}<Keyword>return</Keyword>;{'\n'}
                    {'    '}{'}'}{'\n\n'}
                    {'    '}Node* temp = head; <Comment>// 3. ุงููุฑูุฑ ุฅูู ููุงูุฉ ุงููุงุฆูุฉ</Comment>{'\n'}
                    {'    '}<Keyword>while</Keyword> (temp-&gt;next != <Keyword>nullptr</Keyword>) {'{'}{'\n'}
                    {'        '}temp = temp-&gt;next;{'\n'}
                    {'    '}{'}'}{'\n\n'}
                    {'    '}temp-&gt;next = newNode; <Comment>// 4. ุฑุจุท ุงูุนูุฏุฉ ุงูุฃุฎูุฑุฉ ุจุงูุนูุฏุฉ ุงูุฌุฏูุฏุฉ</Comment>{'\n'}
                    {'}'}
                </CodeBlock>
                 <h4 className="font-bold text-xl mb-2 text-slate-700 mt-8">2. ุงูุฅุถุงูุฉ ูู ุจุฏุงูุฉ ุงููุงุฆูุฉ</h4>
                <CodeBlock title="ุฏุงูุฉ insertAtBeginning">
                    <Keyword>void</Keyword> LinkedList::<Func>insertAtBeginning</Func>(<Keyword>int</Keyword> value) {'{'}{'\n'}
                    {'    '}Node* newNode = <Keyword>new</Keyword> Node(); <Comment>// 1. ุฅูุดุงุก ุนูุฏุฉ ุฌุฏูุฏุฉ</Comment>{'\n'}
                    {'    '}newNode-&gt;data = value;{'\n\n'}
                    {'    '}newNode-&gt;next = head; <Comment>// 2. ุฌุนู ุงูุนูุฏุฉ ุงูุฌุฏูุฏุฉ ุชุดูุฑ ุฅูู ุงูุฑุฃุณ ุงููุฏูู</Comment>{'\n'}
                    {'    '}head = newNode; <Comment>// 3. ุชุญุฏูุซ ุงูุฑุฃุณ ููุตุจุญ ุงูุนูุฏุฉ ุงูุฌุฏูุฏุฉ</Comment>{'\n'}
                    {'}'}
                </CodeBlock>

                <h4 className="font-bold text-xl mb-2 text-slate-700 mt-8">3. ุญุฐู ุนูุฏุฉ</h4>
                <CodeBlock title="ุฏุงูุฉ deleteNode">
                    <Keyword>bool</Keyword> LinkedList::<Func>deleteNode</Func>(<Keyword>int</Keyword> value) {'{'}{'\n'}
                    {'    '}<Keyword>if</Keyword> (head == <Keyword>nullptr</Keyword>) <Keyword>return false</Keyword>; <Comment>// ุงููุงุฆูุฉ ูุงุฑุบุฉ</Comment>{'\n\n'}
                    {'    '}<Comment>// ุงูุญุงูุฉ 1: ุงูุนูุฏุฉ ุงููุฑุงุฏ ุญุฐููุง ูู ุงูุฑุฃุณ</Comment>{'\n'}
                    {'    '}<Keyword>if</Keyword> (head-&gt;data == value) {'{'}{'\n'}
                    {'        '}Node* temp = head;{'\n'}
                    {'        '}head = head-&gt;next;{'\n'}
                    {'        '}<Keyword>delete</Keyword> temp;{'\n'}
                    {'        '}<Keyword>return true</Keyword>;{'\n'}
                    {'    '}{'}'}{'\n\n'}
                    {'    '}<Comment>// ุงูุญุงูุฉ 2: ุงูุจุญุซ ุนู ุงูุนูุฏุฉ ูุญุฐููุง</Comment>{'\n'}
                    {'    '}Node* current = head;{'\n'}
                    {'    '}Node* prev = <Keyword>nullptr</Keyword>;{'\n'}
                    {'    '}<Keyword>while</Keyword> (current != <Keyword>nullptr</Keyword> && current-&gt;data != value) {'{'}{'\n'}
                    {'        '}prev = current;{'\n'}
                    {'        '}current = current-&gt;next;{'\n'}
                    {'    '}{'}'}{'\n\n'}
                    {'    '}<Keyword>if</Keyword> (current == <Keyword>nullptr</Keyword>) <Keyword>return false</Keyword>; <Comment>// ูู ูุชู ุงูุนุซูุฑ ุนูู ุงูุนูุฏุฉ</Comment>{'\n\n'}
                    {'    '}prev-&gt;next = current-&gt;next; <Comment>// ุชุฌุงูุฒ ุงูุนูุฏุฉ ุงููุฑุงุฏ ุญุฐููุง</Comment>{'\n'}
                    {'    '}<Keyword>delete</Keyword> current;{'\n'}
                    {'    '}<Keyword>return true</Keyword>;{'\n'}
                    {'}'}
                </CodeBlock>
            </section>
        </div>
    );
};

export default LinkedListTopic;